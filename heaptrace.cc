/* Copyright (c) 2022 LG Electronics Inc. */
/* SPDX-License-Identifier: GPL-2.0 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <argp.h>

#include "heaptrace.h"

#define HEAPTRACE_VERSION "v0.01"

struct opts opts;

// output of --version option (generated by argp runtime)
const char *argp_program_version = "heaptrace " HEAPTRACE_VERSION;

// (a part of) output in --help option (generated by argp runtime)
const char *argp_program_bug_address = "http://mod.lge.com/hub/hong.gyu.kim/heaptrace/issues";

static struct argp_option heaptrace_options[] = {
	{ "help", 'h', 0, 0, "Give this help list" },
	{ 0 }
};

static error_t parse_option(int key, char *arg, struct argp_state *state)
{
	struct opts *opts = (struct opts*)state->input;

	switch (key) {
	case 'h':
		argp_state_help (state, state->out_stream, ARGP_HELP_STD_HELP);
		break;

	case ARGP_KEY_ARG:
		if (state->arg_num)
			return ARGP_ERR_UNKNOWN;

		if (opts->exename == NULL) {
			// remaining options will be processed in ARGP_KEY_ARGS
			return ARGP_ERR_UNKNOWN;
		}

		break;

	case ARGP_KEY_ARGS:
		// process remaining non-option arguments
		opts->exename = state->argv[state->next];
		opts->idx = state->next;
		break;

	case ARGP_KEY_NO_ARGS:
	case ARGP_KEY_END:
		if (state->arg_num < 1)
			argp_usage(state);
		break;

	default:
		return ARGP_ERR_UNKNOWN;
	}
	return 0;
}

static void init_options(int argc, char *argv[])
{
	struct argp argp = {
		heaptrace_options,
		parse_option,
		"[<program>]",
		"heaptrace -- collects and reports heap allocated memory",
	};

	argp_parse(&argp, argc, argv, ARGP_IN_ORDER, NULL, &opts);
}

static void setup_child_environ(struct opts *opts, int argc, char *argv[])
{
	char buf[4096];
	char *old_preload = getenv("LD_PRELOAD");
	char *old_libpath = getenv("LD_LIBRARY_PATH");

	// ensure heaptrace gets called at first
	snprintf(buf, sizeof(buf), "libheaptrace.so:%s", old_preload ?: "");
	setenv("LD_PRELOAD", buf, 1);
}

int main(int argc, char *argv[])
{
	init_options(argc, argv);

	// pass only non-heaptrace options to execv()
	argc -= opts.idx;
	argv += opts.idx;

	setup_child_environ(&opts, argc, argv);

	execv(opts.exename, argv);

	return 0;
}
